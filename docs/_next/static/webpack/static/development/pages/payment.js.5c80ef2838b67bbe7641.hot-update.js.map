{"version":3,"file":"static/webpack/static/development/pages/payment.js.5c80ef2838b67bbe7641.hot-update.js","sources":["webpack:///./src/components/Payment/index.tsx"],"sourcesContent":["import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { useTable, useSortBy, usePagination, HeaderGroup, Row, Cell } from 'react-table';\nimport { css } from '@emotion/core';\nimport { RenterPlusLoginState } from '../../redux/reducers/reducerCombo';\nimport { ConnectedProps } from '../../utils/redux/types';\nimport Link from '../Link';\nimport StyledPaymentHistoryDiv from './StyledPaymentHistoryDiv';\nimport { PaymentTransaction } from '../../redux/reducers/types';\nimport rem from '../../utils/style/rem';\n\n/* eslint-disable react/jsx-props-no-spreading */\n\nconst PageButtonStyle = (disabled: boolean) => css`\n  border: ${rem(1)} ${disabled ? 'lightgray' : 'black'} solid;\n  width: ${rem(32)};\n  height: ${rem(32)};\n  margin: 0 ${rem(4)};\n  ${disabled ? '' : 'cursor: pointer'};\n  font-size: ${rem(18)};\n`;\n\nconst mapStateToProps = (state: RenterPlusLoginState) => ({\n  redirectTo: state?.payment?.redirectTo ?? '',\n  paymentHistory: state?.payment?.paymentHistory ?? {},\n  paymentAccountsInvolved: state?.payment?.paymentAccountsInvolved ?? {},\n});\n\ntype Props = ConnectedProps<typeof mapStateToProps>;\n\nconst Payment: FC<Props> = ({ redirectTo, paymentHistory, paymentAccountsInvolved }) => {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Payment History',\n        columns: [\n          {\n            Header: 'Time Stamp',\n            accessor: (row: PaymentTransaction) => row.timeStamp.calendar(),\n            id: 'date',\n            sortType: (rowA: Row<PaymentTransaction>, rowB: Row<PaymentTransaction>) => {\n              if (rowA.original.timeStamp.isAfter(rowB.original.timeStamp)) {\n                return 1;\n              }\n              if (rowA.original.timeStamp.isBefore(rowB.original.timeStamp)) {\n                return -1;\n              }\n              return 0;\n            },\n          },\n          {\n            Header: 'Amount',\n            accessor: (row: PaymentTransaction) => `$${row.amount.toFixed(2)}`,\n            id: 'amount',\n          },\n          {\n            Header: 'From',\n            accessor: (row: PaymentTransaction) =>\n              paymentAccountsInvolved[row.fromPaymentAccountId].displayName,\n            id: 'fromAccountName',\n          },\n          {\n            Header: 'To',\n            accessor: (row: PaymentTransaction) =>\n              paymentAccountsInvolved[row.toPaymentAccountId].displayName,\n            id: 'toAccountName',\n          },\n          {\n            Header: 'Description',\n            accessor: 'description',\n          },\n        ],\n      },\n    ],\n    [paymentAccountsInvolved]\n  );\n\n  const data = useMemo(() => Object.values(paymentHistory), [paymentHistory]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable<PaymentTransaction>(\n    // @ts-ignore\n    { columns, data, initialState: { pageIndex: 0, pageSize: 2 } },\n    useSortBy,\n    usePagination\n  );\n\n  return (\n    <div>\n      <h2>Payment</h2>\n      {page.length > 0 && (\n        <StyledPaymentHistoryDiv>\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup: HeaderGroup<PaymentTransaction>) => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map((header: any) => (\n                    <th {...header.getHeaderProps(header.getSortByToggleProps())}>\n                      {header.render('Header')}\n                      <span>{(header.isSorted && (header.isSortedDesc ? 'ᐁ' : 'ᐃ')) || ''}</span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {page.map((row: Row<PaymentTransaction>) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map((cell: Cell<PaymentTransaction>) => {\n                      return <td {...cell.getCellProps()}>{cell.value}</td>;\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <div className=\"pagination\">\n            <button\n              type=\"button\"\n              onClick={() => gotoPage(0)}\n              disabled={!canPreviousPage}\n              css={PageButtonStyle(!canPreviousPage)}\n            >\n              {'<<'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => previousPage()}\n              disabled={!canPreviousPage}\n              css={PageButtonStyle(!canPreviousPage)}\n            >\n              {'<'}\n            </button>\n            <div>\n              {'Page '}\n              <input\n                type=\"number\"\n                value={pageIndex + 1}\n                min=\"1\"\n                max={pageOptions.length}\n                onChange={e => {\n                  let newPageIndex = Math.max(parseInt(e.target?.value ?? 1, 10) - 1, 0);\n                  newPageIndex = Number.isNaN(newPageIndex) ? 0 : newPageIndex;\n                  gotoPage(newPageIndex);\n                }}\n              />\n              {` of ${pageOptions.length}`}\n            </div>\n            <div>\n              {'Show '}\n              <input\n                type=\"number\"\n                value={pageSize}\n                min=\"1\"\n                onChange={e => {\n                  let newPageSize = Math.max(parseInt(e.target?.value ?? 1, 10), 1);\n                  newPageSize = Number.isNaN(newPageSize) ? 1 : newPageSize;\n                  setPageSize(newPageSize);\n                }}\n              />\n              {' rows'}\n            </div>\n            <button\n              type=\"button\"\n              onClick={() => nextPage()}\n              disabled={!canNextPage}\n              css={PageButtonStyle(!canNextPage)}\n            >\n              {'>'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}\n              css={PageButtonStyle(!canNextPage)}\n            >\n              {'>>'}\n            </button>\n          </div>\n        </StyledPaymentHistoryDiv>\n      )}\n      <Link href={redirectTo}>\n        <a>back</a>\n      </Link>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(Payment);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AACA;AADA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAZA;AAeA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAEA;AAJA;AAOA;AACA;AAAA;AAAA;AAEA;AAJA;AAOA;AACA;AAFA;AAlCA;AADA;AA6CA;AAAA;AAAA;AACA;AAhDA;AAkEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}